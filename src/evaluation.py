import RMLtoShacl
import shaclgen.shaclgen
import argparse
from argparse import RawDescriptionHelpFormatter
from argparse import RawTextHelpFormatter
import time
import tracemalloc

from shaclgen.shaclgen.shaclgen import data_graph
import shaclgen.shaclgen.schema as schema

parser = argparse.ArgumentParser(
    formatter_class=RawDescriptionHelpFormatter,
    description=("""
    ---------------------------Shaclgen------------------------------------------

    Shaclgen takes either a data graph(s) or schema(s) as input and generates
    a basic shape file based on the classes and properties present.

    usage:
        shaclgen [path to graph] [optional arguments]
        $ shaclgen https://www.lib.washington.edu/static/public/cams/data/datasets/uwSemWebParts/webResource-1-0-0.nt -ns www.example.org exam

    Multiple graphs:
    To load multiple graphs simply list all the graphs one after the other. RDF serializtion does not matter.
    example:
        $ shaclgen https://www.lib.washington.edu/static/public/cams/data/datasets/uwSemWebParts/webResource-1-0-0.nt https://www.lib.washington.edu/static/public/cams/data/datasets/uwSemWebParts/collection-1-0-0.ttl

    Shape files from data graphs:
    By default, the input graph is processed as instance triples.

    Shape files from ontologies:
    If the input is a schema or ontology (-o), shaclgen will generate
    a nested shape file: properties with rdfs:domain defined in the ontology
    will be nested within the appropriate NodeShape. rdfs:range definitions
    for XML and rdfs datatypes are included.

    Serialization options:
        turtle = turtle
        ntriples = nt
        rdfxml = xml
        n3 = n3

    """))

parser.add_argument("graph", nargs='+', type=str, help="The data graph(s).")

args = parser.parse_args()


def main():
    start = time.time()
    g = data_graph(args.graph, None)

    kwargs = {"serial": "turtle"}
    print('## shape file generated by SHACLGEN')
    shape = g.gen_graph(**kwargs)

    with open("shapes.ttl", "w") as f:
        f.write(shape)
    end = time.time()

    print(f"Evaluation time taken: {end - start} seconds")


if __name__ == '__main__':
    main()
